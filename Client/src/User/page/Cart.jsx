import { useContext, useEffect, useMemo, useState, useCallback } from "react";
import axios from "@/api/axios";
import Swal from "sweetalert2";
import "sweetalert2/dist/sweetalert2.min.css";
import { AuthContext } from "@/context/ProtectRoute";
import { useNavigate, useLocation } from "react-router-dom";
import "@css/pages/CartPage.css";

const currency = (n) =>
  (Number(n) || 0).toLocaleString("th-TH", {
    style: "currency",
    currency: "THB",
  });

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå
const toNum = (v) => (typeof v === "number" ? v : Number(v) || 0);
const recomputeTotal = (items) =>
  (items || []).reduce((s, it) => s + toNum(it.qty) * toNum(it.price), 0);

export default function Cart() {
  const { auth } = useContext(AuthContext);
  const navigate = useNavigate();
  const location = useLocation();

  const vendorIdFromState = location.state?.vendorId; // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ MenuStore ‡∏ï‡∏≠‡∏ô navigate ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  const shopFromState = location.state?.shop;

  // ‡∏õ‡∏£‡∏±‡∏ö mapping ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  const userId = auth?.user_id || auth?.uid || "";
  const customerId = auth?.username || auth?.customerId || auth?.email || "";

  const [loading, setLoading] = useState(true);
  const [cart, setCart] = useState({ customerId, items: [], total: 0 });

  // ‡∏î‡∏∂‡∏á vendor/shop ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏≤‡∏Å BE)
  const getVendorShopFromItems = (items) => {
    const f = (items && items[0]) || {};
    const vendorId = f.vendorId || f.VendorID || "";
    const shopId = f.shopId || f.ShopID || "";
    return { vendorId, shopId };
  };

  // ‡πÉ‡∏ä‡πâ vendor/shop ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cart)
  const currentVendorShop = useMemo(() => {
    const { vendorId, shopId } = getVendorShopFromItems(cart.items);
    return {
      vendorId: vendorIdFromState || vendorId,
      shopId: shopFromState?.id || shopId,
    };
  }, [vendorIdFromState, shopFromState, cart.items]);

  // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏õ /menu/:vendorId)
  const goBackToVendor = useCallback(() => {
    const vid = currentVendorShop.vendorId;
    if (vid) {
      navigate(`/menu/${vid}`, { state: { shop: shopFromState } });
    } else {
      navigate("/"); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    }
  }, [currentVendorShop.vendorId, shopFromState, navigate]);

  const canCheckout = useMemo(
    () => (cart.items?.length || 0) > 0 && toNum(cart.total) > 0,
    [cart]
  );

  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /api/cart ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  const apiGetCart = useCallback(
    (customerId) =>
      axios.get("/api/cart", { params: { customerId }, withCredentials: true }),
    []
  );
  const apiUpdateQty = useCallback(
    (body) => axios.patch("/api/cart/qty", body, { withCredentials: true }),
    []
  );
  const apiCheckout = useCallback(
    (body) => axios.post("/api/cart/checkout", body, { withCredentials: true }),
    []
  );

  const fetchCart = useCallback(async () => {
    if (!customerId) {
      setLoading(false);
      return Swal.fire(
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        "‡πÑ‡∏°‡πà‡∏û‡∏ö customerId ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
        "error"
      );
    }
    setLoading(true);
    try {
      const { data } = await apiGetCart(customerId);
      // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ field ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞ total ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠
      const items = (data.items || []).map((it) => ({
        ...it,
        qty: toNum(it.qty),
        price: toNum(it.price),
      }));
      const serverTotal = toNum(data.total);
      const safeTotal = serverTotal > 0 ? serverTotal : recomputeTotal(items);
      setCart({ ...data, items, total: safeTotal });
    } catch (e) {
      console.error("GET /api/cart error:", e?.response?.data || e.message);
      Swal.fire(
        "‡∏î‡∏∂‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        e?.response?.data?.error || e.message,
        "error"
      );
    } finally {
      setLoading(false);
    }
  }, [customerId, apiGetCart]);

  useEffect(() => {
    fetchCart();
  }, [fetchCart]);

  const updateQty = async (menuId, qty) => {
    const newQty = Math.max(0, Math.floor(toNum(qty)));
    const { vendorId, shopId } = getVendorShopFromItems(cart.items);
    try {
      await apiUpdateQty({ vendorId, shopId, customerId, menuId, qty: newQty });
      // optimistic update
      setCart((prev) => {
        const items = prev.items
          .map((it) => (it.id === menuId ? { ...it, qty: newQty } : it))
          .filter((it) => toNum(it.qty) > 0);
        return { ...prev, items, total: recomputeTotal(items) };
      });
    } catch (e) {
      console.error(
        "PATCH /api/cart/qty error:",
        e?.response?.data || e.message
      );
      Swal.fire(
        "‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        e?.response?.data?.error || e.message,
        "error"
      );
    }
  };

  const removeItem = async (menuId) => {
    const ok = await Swal.fire({
      title: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!ok.isConfirmed) return;
    updateQty(menuId, 0);
  };

  const onCheckout = async () => {
    if (!canCheckout) return;
    const { vendorId, shopId } = getVendorShopFromItems(cart.items);
    if (!vendorId || !shopId) {
      return Swal.fire(
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
        "‡πÑ‡∏°‡πà‡∏û‡∏ö vendorId/shopId ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤",
        "info"
      );
    }

    const ok = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
      html: `<div style="text-align:left">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: <b>${currency(
        cart.total
      )}</b><br/>‡∏£‡πâ‡∏≤‡∏ô: ${shopId}<br/>Vendor: ${vendorId}</div>`,
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!ok.isConfirmed) return;

    try {
      const { data } = await apiCheckout({
        vendorId,
        shopId,
        customerId,
        userId,
      });
      await Swal.fire("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß", `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${data.orderId}`, "success");
      fetchCart(); // ‡∏´‡∏•‡∏±‡∏á checkout BE ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‚Üí ‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á
      // navigate("/orders");
    } catch (e) {
      console.error(
        "POST /api/cart/checkout error:",
        e?.response?.data || e.message
      );
      const msg =
        e?.response?.data?.error || e?.response?.data?.msg || "checkout failed";
      Swal.fire("‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", msg, "error");
    }
  };

  if (!customerId)
    return <p className="cartPage">‡πÑ‡∏°‡πà‡∏û‡∏ö customerId ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>;

  return (
    <div className="cartPage">
      <h2>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>

      {loading ? (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      ) : (cart.items?.length || 0) === 0 ? (
        <div className="emptyCart">
          <p>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á</p>
          <button className="btn" onClick={goBackToVendor}>
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠
          </button>
        </div>
      ) : (
        <>
          <div className="cartList">
            {cart.items.map((it) => (
              <div className="cartItem" key={it.id}>
                <img
                  src={it.image || "https://placehold.co/80x80"}
                  alt={it.name}
                  className="thumb"
                />
                <div className="info">
                  <div className="name">{it.name}</div>
                  <div className="desc line-clamp-2">{it.description}</div>
                  <div className="meta">
                    <span className="price">{currency(it.price)}</span>
                    <span className="x">x</span>
                    <div className="qtyBox">
                      <button
                        className="qtyBtn"
                        onClick={() => updateQty(it.id, toNum(it.qty) - 1)}
                      >
                        ‚àí
                      </button>
                      <input
                        className="qtyInput"
                        type="number"
                        min={0}
                        value={toNum(it.qty)}
                        onChange={(e) => updateQty(it.id, e.target.value)}
                      />
                      <button
                        className="qtyBtn"
                        onClick={() => updateQty(it.id, toNum(it.qty) + 1)}
                      >
                        +
                      </button>
                    </div>
                    <span className="subtotal">
                      = {currency(toNum(it.qty) * toNum(it.price))}
                    </span>
                  </div>
                </div>
                <button
                  className="removeBtn"
                  onClick={() => removeItem(it.id)}
                  aria-label="remove"
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
          </div>

          <div className="cartSummary">
            <div className="row">
              <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</span>
              <strong>{currency(cart.total)}</strong>
            </div>
            <div className="actions">
              <button className="btn ghost" onClick={goBackToVendor}>
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠
              </button>
              <button
                className="btn primary"
                disabled={!canCheckout}
                onClick={onCheckout}
              >
                ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô / ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
