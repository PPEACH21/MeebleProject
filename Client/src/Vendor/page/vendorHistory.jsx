// src/User/page/VendorHistory.jsx
import { useEffect, useState, useContext } from "react";
import axios from "@/api/axios";
import { AuthContext } from "@/context/ProtectRoute";
import "@css/pages/VendorHistory.css";

/* ---------- helpers ---------- */
const toDate = (v) => {
  if (!v) return null;
  if (typeof v === "object" && ("seconds" in v || "_seconds" in v)) {
    const s = v.seconds ?? v._seconds;
    return new Date(s * 1000);
  }
  return new Date(v);
};

const formatThaiBuddhist = (v) => {
  const d = toDate(v);
  if (!d || isNaN(+d)) return "-";
  return new Intl.DateTimeFormat("th-TH-u-ca-buddhist", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  }).format(d);
};

const currency = (n) =>
  (Number(n) || 0).toLocaleString("th-TH", {
    style: "currency",
    currency: "THB",
    minimumFractionDigits: 0,
  });

const canonicalStatusTH = (s) => {
  const x = String(s || "").toLowerCase();
  if (["prepare", "preparing", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°"].includes(x)) return "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°";
  if (["ongoing", "on-going", "shipping", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"].includes(x)) return "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á";
  if (["success", "completed", "done", "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].includes(x)) return "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
  return s || "-";
};

const computeTotal = (raw) => {
  if (typeof raw?.total === "number") return raw.total;
  const items = Array.isArray(raw?.items) ? raw.items : [];
  return items.reduce(
    (s, it) => s + (Number(it?.qty) || 0) * (Number(it?.price) || 0),
    0
  );
};
const shortId = (id = "") => (id.length > 8 ? id.slice(0, 6) + "‚Ä¶" : id);

/* ---------- component ---------- */
export default function VendorHistory() {
  const { auth } = useContext(AuthContext);
  const [shopId, setShopId] = useState("");
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");
  const [selected, setSelected] = useState(null);
  const [loadingOne, setLoadingOne] = useState(false);

  const userId = auth?.user_id || localStorage.getItem("meeble_userId");

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const pickUserName = (u = {}) =>
    u.username || u.name || u.fullname || u.displayName || u.email || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

  // ‡πÄ‡∏ï‡∏¥‡∏° customerName ‡πÉ‡∏´‡πâ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å userId/customerId
  const enrichCustomerNames = async (list) => {
    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° userId ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ customerName
    const ids = Array.from(
      new Set(
        list
          .map((r) => r.userId || r.customerId || r.customerID || r.customer_id)
          .filter(Boolean)
      )
    );

    if (ids.length === 0) return list;

    console.log("üë§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", ids.length, "‡∏Ñ‡∏ô");

    // ‡∏¢‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô (‡∏°‡∏µ try/catch ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢)
    const nameMap = {};
    await Promise.all(
      ids.map(async (id) => {
        try {
          const res = await axios.get(`/user/${encodeURIComponent(id)}`, {
            withCredentials: true,
          });
          nameMap[id] = pickUserName(res.data || {});
        } catch (e) {
          console.warn("‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", id, e?.response?.data || e.message);
          nameMap[id] = undefined;
        }
      })
    );

    // ‡∏ú‡∏π‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ customerName
    const next = list.map((r) => {
      if (r.customerName) return r;
      const uid = r.userId || r.customerId || r.customerID || r.customer_id;
      const nm = uid ? nameMap[uid] : undefined;
      return nm ? { ...r, customerName: nm } : r;
    });

    return next;
  };

  // ‡∏î‡∏∂‡∏á shopId ‡∏à‡∏≤‡∏Å user_id ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô VendorOrders
  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        const local = localStorage.getItem("currentShopId");
        if (local) {
          setShopId(local);
          console.log("‚úÖ ‡πÉ‡∏ä‡πâ shopId ‡∏à‡∏≤‡∏Å localStorage:", local);
          return;
        }

        if (!userId) {
          setErr("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
          return;
        }

        const res = await axios.get(`/shops/by-vendor/${userId}`, {
          withCredentials: true,
        });

        let resolvedShop = null;
        if (res.data?.hasShop && res.data.shop) {
          resolvedShop = res.data.shop;
        } else if (Array.isArray(res.data?.shops) && res.data.shops.length > 0) {
          resolvedShop = res.data.shops[0];
        }

        const id =
          resolvedShop?.id || resolvedShop?.ID || resolvedShop?.Id || "";
        if (!id) {
          setErr("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
          return;
        }

        localStorage.setItem("currentShopId", id);
        setShopId(id);
        console.log("üè™ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ shopId ‡∏à‡∏≤‡∏Å backend:", id);
      } catch (e) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e?.response?.data || e.message);
        setErr(e?.response?.data?.error || e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [userId]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡πâ‡∏≤‡∏ô + ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const loadList = async () => {
    if (!shopId) return;
    setLoading(true);
    try {
      const url = `/api/shops/${shopId}/history`;
      console.log("üì• ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å:", url);
      const res = await axios.get(url, { withCredentials: true });

      let list = Array.isArray(res.data) ? res.data : [];

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤
      list = list.sort((a, b) => {
        const ta =
          toDate(a.finishedAt) ||
          toDate(a.movedToHistoryAt) ||
          toDate(a.updatedAt) ||
          toDate(a.createdAt) ||
          new Date(0);
        const tb =
          toDate(b.finishedAt) ||
          toDate(b.movedToHistoryAt) ||
          toDate(b.updatedAt) ||
          toDate(b.createdAt) ||
          new Date(0);
        return tb - ta;
      });

      // ‡πÄ‡∏ï‡∏¥‡∏° customerName ‡∏à‡∏≤‡∏Å userId/customerId
      const enriched = await enrichCustomerNames(list);

      setRows(enriched);
      console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", enriched.length, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
    } catch (e) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡πâ‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
      setErr(e?.response?.data?.error || e.message || "load error");
      setRows([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (shopId) loadList();
  }, [shopId]);

  // ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const openDetail = async (row) => {
    setLoadingOne(true);
    try {
      const url = `/api/shops/${shopId}/history/${row.id}`;
      console.log("üîé ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:", url);
      const res = await axios.get(url, { withCredentials: true });

      // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô detail ‡∏°‡∏µ userId ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ customerName ‡∏Å‡πá‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ list enrich ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô)
      let doc = res.data || row;
      if (!doc.customerName) {
        const uid = doc.userId || doc.customerId || doc.customerID || doc.customer_id;
        if (uid) {
          try {
            const prof = await axios.get(`/user/${encodeURIComponent(uid)}`, {
              withCredentials: true,
            });
            const nm = pickUserName(prof.data || {});
            if (nm) doc = { ...doc, customerName: nm };
          } catch (_) { /* ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡πÑ‡∏õ */ }
        }
      }

      setSelected(doc);
      console.log("‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:", doc);
    } catch (e) {
      console.warn("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°:", e.message);
      setSelected(row);
    } finally {
      setLoadingOne(false);
    }
  };

  const empty = !loading && rows.length === 0 && !err;

  return (
    <div className="vh-wrap">
      <div className="vh-head">
        <h1>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô</h1>
        {shopId && (
          <p className="vh-sub">
            ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (shops/<code>{shopId}</code>/history)
          </p>
        )}
        <div style={{ marginTop: 8 }}>
          <button className="btn" onClick={loadList} disabled={loading || !shopId}>
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </button>
        </div>
      </div>

      {loading && <p className="vh-status">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶</p>}
      {err && !loading && <p className="vh-error">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {String(err)}</p>}
      {empty && <p className="vh-empty">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</p>}

      {!loading && !err && rows.length > 0 && (
        <div className="vh-table">
          <div className="vh-thead">
            <div>‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</div>
            <div>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>
            <div>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
            <div>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</div>
            <div>‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠</div>
          </div>
          <div className="vh-tbody">
            {rows.map((r, i) => {
              const total = computeTotal(r);
              return (
                <div
                  className="vh-tr"
                  key={r.id || i}
                  onClick={() => openDetail(r)}
                  role="button"
                  tabIndex={0}
                  onKeyDown={(e) => e.key === "Enter" && openDetail(r)}
                >
                  <div className="mono">{shortId(r.id)}</div>
                  <div>{r.customerName || r.customer || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</div>
                  <div className={`badge ${String(r.status).toLowerCase()}`}>
                    {canonicalStatusTH(r.status)}
                  </div>
                  <div className="right">{currency(total)}</div>
                  <div>
                    {formatThaiBuddhist(
                      r.finishedAt || r.movedToHistoryAt || r.updatedAt || r.createdAt
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {selected && (
        <div className="vh-modal-backdrop" onClick={() => setSelected(null)}>
          <div className="vh-modal" onClick={(e) => e.stopPropagation()}>
            <div className="vh-modal-header">
              <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {loadingOne ? "(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶)" : ""}</h3>
              <button className="icon-btn" onClick={() => setSelected(null)}>
                ‚úï
              </button>
            </div>
            <div className="vh-modal-body">
              <div className="vh-grid">
                <div>
                  <p className="label">Order ID</p>
                  <p className="mono">{selected.id}</p>
                </div>
                <div>
                  <p className="label">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
                  <p>{selected.customerName || selected.customer || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                </div>
                <div>
                  <p className="label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</p>
                  <p>{canonicalStatusTH(selected.status)}</p>
                </div>
                <div>
                  <p className="label">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠</p>
                  <p>
                    {formatThaiBuddhist(
                      selected.finishedAt ||
                        selected.movedToHistoryAt ||
                        selected.updatedAt ||
                        selected.createdAt
                    )}
                  </p>
                </div>
                <div>
                  <p className="label">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</p>
                  <p><strong>{currency(computeTotal(selected))}</strong></p>
                </div>
              </div>

              <h4 style={{ marginTop: 16 }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h4>
              <div className="vh-items">
                <div className="vh-items-head">
                  <div>‡πÄ‡∏°‡∏ô‡∏π</div>
                  <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</div>
                  <div>‡∏£‡∏≤‡∏Ñ‡∏≤</div>
                  <div>‡∏£‡∏ß‡∏°</div>
                </div>
                <div className="vh-items-body">
                  {(Array.isArray(selected.items) ? selected.items : []).map((it, idx) => (
                    <div className="vh-item-row" key={idx}>
                      <div>{it?.name || `‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà ${idx + 1}`}</div>
                      <div>{Number(it?.qty) || 0}</div>
                      <div>{currency(it?.price)}</div>
                      <div>{currency((Number(it?.qty) || 0) * (Number(it?.price) || 0))}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            <div className="vh-modal-footer">
              <button className="btn" onClick={() => setSelected(null)}>‡∏õ‡∏¥‡∏î</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
