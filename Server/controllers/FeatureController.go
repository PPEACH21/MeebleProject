package controllers

import (
	"context"
	"fmt"
	"mime/multipart"
	"os"
	"time"

	"cloud.google.com/go/firestore"
	"github.com/PPEACH21/MebleBackend-Web/config"
	"github.com/PPEACH21/MebleBackend-Web/models"
	"github.com/gofiber/fiber/v2"
)

func SetLocation(c *fiber.Ctx) error {
	userId := c.Params("ID")

	data := config.Client.Collection("vendor").
		Doc("foLSIgqAeG6qrH29kdo0").
		Collection("shop").
		Doc(userId)

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ doc ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
	_, err := data.Get(config.Ctx)
	if err != nil {
		return c.Status(404).SendString("‡πÑ‡∏°‡πà‡∏û‡∏ö shop ‡∏ô‡∏µ‡πâ")
	}

	datanew := new(models.Shop)
	if err := c.BodyParser(datanew); err != nil {
		return c.Status(400).SendString("BodyParser error")
	}

	_, err = data.Update(config.Ctx, []firestore.Update{
		{Path: "latitude", Value: datanew.Latitude},
		{Path: "longitude", Value: datanew.Longitude},
	})
	if err != nil {
		return c.Status(500).SendString("Firestore update error")
	}

	return c.JSON(fiber.Map{
		"latitude":  datanew.Latitude,
		"longitude": datanew.Longitude,
	})
}

func saveFile(c *fiber.Ctx, file *multipart.FileHeader) (string, error) {
	path := fmt.Sprintf("uploads/%d_%s", time.Now().Unix(), file.Filename)

	if err := os.MkdirAll("uploads", 0755); err != nil {
		return "", err
	}

	// üëá ‡πÉ‡∏ä‡πâ c.SaveFile() ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà fiber.SaveFile()
	if err := c.SaveFile(file, path); err != nil {
		return "", err
	}
	return path, nil
}

func AddMenu(c *fiber.Ctx) error {
	ctx := context.Background()

	vendorId := "foLSIgqAeG6qrH29kdo0"
	data := config.Client.Collection("vendor").
		Doc(vendorId).
		Collection("menu")

	var menu models.Menu
	if err := c.BodyParser(&menu); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
	}

	// üîπ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
	docs, err := data.Documents(ctx).GetAll()
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
	}

	// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á docId ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô menu1, menu2, ...
	newId := fmt.Sprintf("menu%d", len(docs)+1)

	// üîπ ‡πÄ‡∏ã‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ docId ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
	_, err = data.Doc(newId).Set(ctx, menu)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Firestore ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"id":      newId,
		"menu":    menu,
	})
}

func GetMenus(c *fiber.Ctx) error {
	ctx := context.Background()

	vendorId := "foLSIgqAeG6qrH29kdo0"
	data := config.Client.Collection("vendor").
		Doc(vendorId).
		Collection("menu")

	// ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	docs, err := data.Documents(ctx).GetAll()
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô slice ‡∏Ç‡∏≠‡∏á Menu
	menus := []models.Menu{}
	for _, doc := range docs {
		var m models.Menu
		if err := doc.DataTo(&m); err == nil {
			menus = append(menus, m)
		}
	}

	return c.JSON(fiber.Map{
		"success": true,
		"menus":   menus,
	})
}
